@model Models.DTO.Voucher

@{
    ViewBag.Title = "Chi tiết voucher";
    bool isEdit = (bool)ViewBag.isEdit;
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("Update", "Voucher", FormMethod.Post))
{
    <div class="row d-flex justify-content-center align-items-center" style="height:100vh">
        <div class="col-md-8">
            <a href="@Url.Action("Index", "Voucher", new { area = "Admin" })" class="text-decoration-none m-auto">
                <i class="fa-solid fa-arrow-left"></i>
                Trở về
            </a>
            <div class="row justify-content-center p-3">
                <div class="col-md-8">
                    <div class="form-group mt-3">
                        @Html.EditorFor(model => model.ID, new { htmlAttributes = new { @class = "form-control d-none" } })
                        @Html.LabelFor(model => model.Value, htmlAttributes: new { @class = "form-label" })
                        @if (isEdit == true)
                        {
                            @Html.EditorFor(model => model.Value, new { htmlAttributes = new { @class = "form-control", @placeholder = "Nhập giá trị của Voucher", @id = "value_voucher" } })
                        }
                        else
                        {
                            @Html.EditorFor(model => model.Value, new { htmlAttributes = new { @class = "form-control", @placeholder = "Nhập giá trị của Voucher", @id = "value_voucher", @disabled = "" } })
                        }
                        @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group mt-3">
                        @Html.LabelFor(model => model.Seri, htmlAttributes: new { @class = "form-label" })
                        @if (isEdit == true)
                        {
                            @Html.EditorFor(model => model.Seri, new { htmlAttributes = new { @class = "form-control", @placeholder = "Nhập Seri của Voucher", @id = "seri_voucher" } })
                        }
                        else
                        {
                            @Html.EditorFor(model => model.Seri, new { htmlAttributes = new { @class = "form-control", @placeholder = "Nhập Seri của Voucher", @id = "seri_voucher", @disabled = "" } })
                        }
                        @Html.ValidationMessageFor(model => model.Seri, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group mt-3">
                        @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "form-label" })
                        @if (isEdit == true)
                        {
                            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", @placeholder = "Nhập Số lượng Voucher", @id = "quantity_voucher" } })
                        }
                        else
                        {
                            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", @placeholder = "Nhập Số lượng Voucher", @id = "quantity_voucher", @disabled = "" } })
                        }
                        @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group mt-3">
                        @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "form-label" })
                        @if (isEdit == true)
                        {
                            @*@Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control", @id = "startDate_voucher", @type = "date", @value = Model.StartDate.ToString("yyyy-MM-dd") } });*@
                            <input class="form-control text-box single-line" data-val="true" data-val-date="The field Ngày bắt đầu must be a date." data-val-required="The Ngày bắt đầu field is required." id="startDate_voucher" name="StartDate" type="date" value="@Model.StartDate.ToString("yyyy-MM-dd")">
                            <span id="validation-startDate-message" class="text-danger d-none">Ngày bắt đầu không được bé hơn ngày hiện tại</span>
                        }
                        else
                        {
                            @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control", @id = "startDate_voucher", @disabled = "" } })
                        }
                        @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group mt-3">
                        @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "form-label" })
                        @if (isEdit == true)
                        {
                            <input class="form-control text-box single-line" data-val="true" data-val-date="The field Ngày kết thúc must be a date." data-val-required="The Ngày kết thúc field is required." id="endDate_voucher" name="EndDate" type="date" value="@Model.EndDate.ToString("yyyy-MM-dd")">
                            <span id="validation-endDate-message" class="text-danger d-none">Ngày kết thúc không được bé hơn ngày bắt đầu</span>
                        }
                        else
                        {
                            @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control", @id = "endDate_voucher", @disabled = "" } })
                        }
                        @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group mt-3">
                        @Html.LabelFor(model => model.CreatedAt, htmlAttributes: new { @class = "form-label" })
                        <input disabled value="@Model.CreatedAt.ToString()" type="text" class="form-control" />
                    </div>
                    <div class="form-group mt-3">
                        @Html.LabelFor(model => model.UpdatedAt, htmlAttributes: new { @class = "form-label" })
                        @if (Model.UpdatedAt == null)
                        {
                            <input disabled value="dd/mm/yyyy" type="text" class="form-control" />
                        }
                        else
                        {
                            <input disabled value="@Model.UpdatedAt.ToString()" type="text" class="form-control" />
                        }
                    </div>
                    <div class="col-12">
                        @if (isEdit == true)
                        {
                            <button class="btn btn-primary col-12 mt-3" id="submitBtn" type="submit">
                                Xác Nhận
                            </button>
                        }
                        else
                        {
                            <a href="@Url.Action("View","Voucher", new {id = @Model.ID, isEdit = true})" class="btn btn-primary col-12 mt-3" id="submitBtn">Cập nhật Voucher</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<div class="position-fixed top-0 end-0 p-3" style="z-index: 11">
    <div id="notification_toast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <i class="fa-solid fa-bell"></i>
            <strong class="me-auto ms-1">Thông báo</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        @if (TempData["Status"] != null)
        {
            if ((bool)TempData["Status"] == false)
            {
                <div class="toast-body text-white bg-danger" id="toast_body">
                    @TempData["Message"]
                </div>
            }
            else
            {
                <div class="toast-body text-white bg-success" id="toast_body">
                    @TempData["Message"]
                </div>
            }
        }
        else
        {
            <div class="toast-body text-white bg-success" id="toast_body">

            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        window.addEventListener('load', (e) => {
            const toast = document.getElementById('toast_body');
            if (toast.innerText.trim() != '') $("#notification_toast").toast('show');
        })
        //$('#submit').click(e => {
        //    let startDate = document.getElementById('startDate_voucher');
        //    let endDate = document.getElementById('endDate_voucher');
        //    let validationMessage = document.getElementById('validation-message');
        //    if (new Date(endDate.value).getTime() < new Date(startDate.value).getTime()) {
        //        if (validationMessage.classList.contains('d-none')) validationMessage.classList.remove('d-none');
        //        e.preventDefault();
        //    } else {
        //        if (!validationMessage.classList.contains('d-none')) validationMessage.classList.add('d-none');
        //    }
        //});
    </script>
    <script src="~/public/js/Voucher.js"></script>
    <script src="/Scripts/jquery.unobtrusive-ajax.js"></script>
    <script src="/Scripts/jquery.validate.js"></script>
    <script src="/Scripts/jquery.validate.unobtrusive.js"></script>
}
